"""
Django settings for Investigation project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
from pathlib import Path
import json
import ldap
from django_auth_ldap.config import LDAPSearch

CONFIG_PATH = "/app/settings.json"
with open(CONFIG_PATH) as config_file:
    config = json.load(config_file)

ldap_config = config.get('ldap', {})
suspicious_config = config.get('suspicious', {})
cortex_config = config.get('cortex', {})
db_config = config.get('database', {})

BASE_DIR = Path(__file__).resolve().parent.parent.parent
SECRET_KEY = suspicious_config.get('django_secret_key', 'default_secret_key')
DEBUG = suspicious_config.get('django_debug', False)
ALLOWED_HOSTS = [
    suspicious_config.get('allowed_host', 'default_allowed_host'),
    cortex_config.get('cortex_url', 'default_cortex_url'),
    '127.0.0.1',
    'localhost'
]
CSRF_TRUSTED_ORIGINS = [suspicious_config.get('csrf_trusted_origins', 'https://example.com')]
TIME_ZONE = suspicious_config.get('tz', 'UTC')
USE_TZ = True

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': db_config.get('mysql_database', 'default_db_name'),
        'USER': db_config.get('mysql_user', 'default_db_user'),
        'PASSWORD': db_config.get('mysql_password', 'default_db_password'),
        'HOST': db_config.get('mysql_host', 'default_db_host'),
        'PORT': db_config.get('mysql_port', '3306'),
        'OPTIONS': {
            'charset': 'utf8mb4',
        }
    }
}

if db_config.get('db_use_ssl', 'NO') == 'YES':
    DATABASES['default']['OPTIONS'] = {'ssl': {'ca': '/cert.pem'}}
if db_config.get('db_use_connection_pooling', 'NO') == 'YES':
    DATABASES['default']['CONN_MAX_AGE'] = 600  # 10 minutes
if db_config.get('db_use_persistent_connections', 'NO') == 'YES':
    DATABASES['default']['CONN_MAX_AGE'] = None

AUTH_LDAP_SERVER_URI = ldap_config.get("auth_ldap_server_uri")
AUTH_LDAP_BIND_DN = ldap_config.get("auth_ldap_bind_dn")
AUTH_LDAP_BIND_PASSWORD = ldap_config.get("auth_ldap_bind_password")
AUTH_LDAP_USER_SEARCH = LDAPSearch(
    ldap_config.get("auth_ldap_base_dn"),
    ldap.SCOPE_SUBTREE,
    ldap_config.get("auth_ldap_filter")
)

AUTH_LDAP_VERIFY_SSL = ldap_config.get('auth_ldap_verify_ssl', 'False')
if not AUTH_LDAP_VERIFY_SSL:
    AUTH_LDAP_GLOBAL_OPTIONS = {ldap.OPT_X_TLS_REQUIRE_CERT: ldap.OPT_X_TLS_NEVER}

# Mapping LDAP attributes to Django User model fields
AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail",
}

# Logging configuration
LOGGING = {
    "version": 1,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} | {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': suspicious_config.get('trace_level', 'DEBUG'),
            'class': 'logging.FileHandler',
            'filename': '/var/log/suspicious.log',
            'formatter': 'verbose',
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'fetch_mail_file': {
            'level': suspicious_config.get('trace_level', 'DEBUG'),
            'class': 'logging.FileHandler',
            'filename': '/var/log/fetched_mail.log',
            'formatter': 'verbose',
        },
        'update_cases_file': {
            'level': suspicious_config.get('trace_level', 'DEBUG'),
            'class': 'logging.FileHandler',
            'filename': '/var/log/case_updating.log',
            'formatter': 'verbose',
        },
        'fetch_analyzer_file': {
            'level': suspicious_config.get('trace_level', 'DEBUG'),
            'class': 'logging.FileHandler',
            'filename': '/var/log/fetch_analyzer.log',
            'formatter': 'verbose',
        },
        'cleanup_phishing_file': {
            'level': suspicious_config.get('trace_level', 'DEBUG'),
            'class': 'logging.FileHandler',
            'filename': '/var/log/cleanup_phishing.log',
            'formatter': 'verbose',
        },
    },
    "loggers": {
        'django': {
            'handlers': ['console'],
            'level': 'ERROR',
        },
        'tasp': {
            'handlers': ['file'],
            'level': suspicious_config.get('trace_level', 'DEBUG'),
            'propagate': False,
        },
        'case_handler': {  # New logger for CaseHandler
            'handlers': ['file'],
            'level': suspicious_config.get('trace_level', 'DEBUG'),
            'propagate': False,
        },
        'tasp.cron.fetch_and_process_emails': {
            'handlers': ['fetch_mail_file'],
            'level': suspicious_config.get('trace_level', 'DEBUG'),
            'propagate': False,
        },
        'tasp.cron.update_ongoing_case_jobs': {
            'handlers': ['update_cases_file'],
            'level': suspicious_config.get('trace_level', 'DEBUG'),
            'propagate': False,
        },
        'tasp.cron.fetch_analyzer': {
            'handlers': ['fetch_analyzer_file'],
            'level': suspicious_config.get('trace_level', 'DEBUG'),
            'propagate': False,
        },
        'tasp.cron.cleanup_phishing': {
            'handlers': ['cleanup_phishing_file'],
            'level': suspicious_config.get('trace_level', 'DEBUG'),
            'propagate': False,
        },
        "django_auth_ldap": {
            'level': suspicious_config.get('trace_level', 'DEBUG'),
            "handlers": ["console"]
        },
    },
    "disable_existing_loggers": False
}

# Maximum upload size in bytes
MAX_UPLOAD_SIZE = 5242880  # 5MB

# LDAP settings
AUTH_LDAP_ALWAYS_UPDATE_USER = True
AUTH_LDAP_CACHE_TIMEOUT = 3600

# Authentication backends
AUTHENTICATION_BACKENDS = (
    'django_auth_ldap.backend.LDAPBackend',
    "django.contrib.auth.backends.ModelBackend",
)

# Application definition
INSTALLED_APPS = [
    'fontawesomefree',
    'tasp.apps.TaspConfig',
    'dashboard.apps.DashboardConfig',
    'case_handler.apps.CaseConfig',
    'cortex_job.apps.CortexConfig',
    'domain_process.apps.DomainConfig',
    'email_process.apps.EmailConfig',
    'file_process.apps.FileConfig',
    'hash_process.apps.HashConfig',
    'ip_process.apps.IPConfig',
    'mail_feeder.apps.MailFeederConfig',
    'profiles.apps.ProfilesConfig',
    'settings.apps.SettingsConfig',
    'url_process.apps.URLConfig',
    'score_process.apps.ScoreConfig',
    'django_crontab',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'import_export',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'suspicious.urls'
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
FILES_BASE_DIR = Path(__file__).resolve().parent.parent
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [FILES_BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'suspicious.wsgi.application'
ASGI_APPLICATION = 'suspicious.asgi.application'


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators
# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 9,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# File upload handlers
FILE_UPLOAD_HANDLERS = [
    "django.core.files.uploadhandler.TemporaryFileUploadHandler",
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'
USE_I18N = True
USE_L10N = True

# Fichiers statiques
STATIC_URL = '/static/'
STATIC_ROOT = FILES_BASE_DIR / 'static'

# Médias
MEDIA_URL = '/media/'
MEDIA_ROOT = FILES_BASE_DIR / 'media'

# Clé primaire par défaut
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# Add default storage for file uploads
DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

# Lock jobs to prevent them from running simultaneously
CRONTAB_LOCK_JOBS = True

# Cron jobs for various tasks
# Each job is run every minute and logs to a specific file in /tmp
# Consider adjusting the frequency of these jobs based on their cost and your needs
CRONJOBS = [
    ('*/1 * * * *', 'tasp.cron.fetch_and_process_emails', '>> /var/log/fetched_mail.log'),
    ('*/1 * * * *', 'tasp.cron.sync_cortex_analyzers'),
    ('*/1 * * * *', 'tasp.cron.update_ongoing_case_jobs', '>> /var/log/case_updating.log'),
    ('*/5 * * * *', 'tasp.cron.sync_monthly_kpi'),
    ('*/10 * * * *', 'tasp.cron.sync_user_profiles'),
    ('0 0 1 * *', 'tasp.cron.delete_old_analyzer_reports', '>> /var/log/cleanup_phishing.log'),
    ('0 0 * * *', 'tasp.cron.remove_old_suspicious_emails', '>> /var/log/cleanup_phishing.log')
]
# Consider adding error handling or notifications for when these jobs fail
# This could be as simple as checking the return code of the job, or as complex as sending an email on failure